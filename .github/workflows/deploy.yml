name: Deploy FastAPI to GKE with SonarQube

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: 'pip'

      - name: Install Dependencies
        run: pip install -r requirements.txt

      # ‚úÖ Install SonarQube Scanner
      - name: Install SonarQube Scanner
        run: |
          echo "üîç Fetching SonarQube Scanner..."

          # ‚úÖ Use a working, stable version
          SONAR_VERSION="7.0.0.4796"
          echo "Using SonarQube Scanner Version: $SONAR_VERSION"

          # ‚úÖ Correct download URL
          DOWNLOAD_URL="https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_VERSION-linux-x64.zip"

          # ‚úÖ Download SonarQube Scanner
          echo "Downloading from $DOWNLOAD_URL..."
          curl -fSL -o sonar-scanner.zip "$DOWNLOAD_URL"

          # ‚úÖ Verify download
          if [ ! -s sonar-scanner.zip ]; then
            echo "‚ùå ERROR: Download failed!"
            exit 1
          fi

          # ‚úÖ Extract and move
          unzip sonar-scanner.zip
          sudo mv sonar-scanner-* /opt/sonar-scanner

          # ‚úÖ Add to PATH
          echo 'export PATH="/opt/sonar-scanner/bin:$PATH"' | sudo tee -a /etc/profile
          source /etc/profile

          # ‚úÖ Verify installation
          /opt/sonar-scanner/bin/sonar-scanner --version

      # ‚úÖ Run SonarQube Analysis for Backend
      - name: Run SonarQube Analysis
        run: |
          /opt/sonar-scanner/bin/sonar-scanner \
          -Dsonar.projectKey=fastapi-backend \
          -Dsonar.sources=app \
          -Dsonar.host.url=http://35.208.148.105:9000 \
          -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v1.1.1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set Up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1.1.1

      - name: Upgrade gcloud CLI
        run: |
          gcloud components update
          gcloud components install gke-gcloud-auth-plugin

      - name: Configure Docker for GCP Artifact Registry
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev

      - name: Build and Push Docker Image
        env:
          IMAGE_TAG: $GITHUB_SHA
        run: |
          docker build -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/fastapi-repo/fastapi-app:$IMAGE_TAG .
          docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/fastapi-repo/fastapi-app:$IMAGE_TAG

      - name: Authenticate kubectl with GKE
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --zone ${{ secrets.GKE_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to GKE
        run: |
          kubectl apply -f k8s/deployment.yaml --validate=false
          kubectl apply -f k8s/hpa.yaml --validate=false
          kubectl apply -f k8s/service.yaml --validate=false

      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/fastapi-app
